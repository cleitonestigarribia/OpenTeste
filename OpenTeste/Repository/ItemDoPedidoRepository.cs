using Dapper;
using OpenTeste.Domain;
using OpenTeste.Interface;
using System.Data.SqlClient;

namespace OpenTeste.Repository
{
    public class ItemDoPedidoRepository : IItemDoPedido
    {
        IConfiguration _configuration;
        public ItemDoPedido itemPedido { get; set; }
        public ItemDoPedidoRepository(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public string GetConnection()
        {
            var connection = _configuration.GetSection("ConnectionStrings").GetSection("Conexao").Value;

            return connection;
        }

        public ItemDoPedido DeleteItemDoPedido(ItemDoPedido itemDoPedido)
        {
            var connectionString = this.GetConnection();

            using (var con = new SqlConnection(connectionString))
            {
                try
                {
                    con.Open();

                    var query = string.Format("Delete [dbo].[ItensPedidos] where id ={0} and idPedido = {1};", itemDoPedido.Id, itemDoPedido.IdPedido);
                    con.Execute(query, itemDoPedido);

                }
                catch (Exception ex)
                {

                    throw ex;
                }
                finally
                {
                    con.Close();
                }

                return itemPedido;
            }
        }

        public List<ItemDoPedido> GetItemDoPedidos(ItemDoPedido itemDoPedido)
        {
            List<ItemDoPedido> listaItensPedidos = new List<ItemDoPedido>();

            var connectionString = GetConnection();
            using (var con = new SqlConnection(connectionString))
            {
                try
                {

                    con.Open();
                    var query = string.Format("SELECT [id], [idPedido], [nome], [valorUnitario] FROM [dbo].[ItensPedidos] {0}", (itemDoPedido.IdPedido > 0 ? String.Concat("Where idPedido = ", itemDoPedido.IdPedido) : ""));
                    listaItensPedidos = con.Query<ItemDoPedido>(query).ToList();

                }
                catch (Exception ex)
                {

                    throw ex;
                }
                finally
                {
                    con.Close();
                }
                return listaItensPedidos;
            }
        }

        public ItemDoPedido InsertItemDoPedido(ItemDoPedido itemDoPedido)
        {
            var connectionString = this.GetConnection();

            using (var con = new SqlConnection(connectionString))
            {
                try
                {
                    con.Open();

                    var query = "INSERT INTO [dbo].[ItensPedidos] ([idPedido], [nome], [valorUnitario]) VALUES (@idPedido, @<nome, @valorUnitario);";
                    con.Execute(query, itemPedido);

                }
                catch (Exception ex)
                {

                    throw ex;
                }
                finally
                {
                    con.Close();
                }

                return itemPedido;
            }
        }

        public ItemDoPedido UpdateItemDoPedido(ItemDoPedido itemDoPedido)
        {
            throw new NotImplementedException();
        }
    }
}
